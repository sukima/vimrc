snippet imember
	import Ember from 'ember';
snippet emcont
	const {
		Controller,
		computed: { reads }
	} = Ember;

	export default Controller.extend({
		${0}: reads('model')
	});
snippet emroute
	const { Route } = Ember;

	export default Route.extend({
		model(params) {
			${0}
		}
	});
snippet emservice
	const { Service } = Ember;

	export default Service.extend({
		${0}
	});
snippet emcomp
	const { Component } = Ember;

	export default Component.extend({
		${0}
	});
snippet emobject
	const { EmObject: Object } = Ember;

	export default EmObject.extend({
		${0}
	});
snippet emmixin
	const { Mixin } = Ember;

	export default Mixin.create({
		${0}
	});

snippet emhelperextend
	const { Helper } = Ember;

	export default Helper.extend({
		compute([${1}], {${2}}) {
			${0}
		}
	});
snippet emhelper
	const { Helper } = Ember;

	export function ${1:helperName}([${2}], {${3}}) {
	  ${0}
	}

	export default Helper.helper($1);
snippet emtest
	test('${1}', function (assert) {
		${0}
	});
snippet empo
	export const ${1:ComponentClass} = {
		scope: '.${0}'
	};

	export default PageObject.create($1);
snippet imi18n
	import { translationMacro as t } from 'ember-i18n';
snippet imhbs
	import hbs from 'htmlbars-inline-precompile';
snippet imec
	import { task } from 'ember-concurrency';
snippet imeo
	import EmObject from 'ember-object';
snippet impo
	import PageObject from 'ember-cli-page-object';
snippet _super
	this._super(...arguments);
snippet pagecontext
	beforeEach() {
		page.setContext(this);
	},

	afterEach() {
		page.removeContext();
	}
